新・SQL入門編02ドリル
<会員のリストを取得しよう>
step1　注文履歴を取得しよう
SELECT * FROM ordered;
/*コメントアウト　SELECT * FROM テーブル名 で、テーブル名 のテーブルのすべてのレコードを取得することができる
よって、SELECT * FROM ordered; と書く*/

step2　注文内容を取得しよう
SELECT * FROM ordered_menu;
/*ordered_menu テーブルのすべてのレコードを取得すればよい
SELECT * FROM テーブル名 で、テーブル名 のテーブルのすべてのレコードを取得することができる
よって、SELECT * FROM ordered_menu; と書く*/

step3　メニューを取得しよう
SELECT * FROM menu;
/*問題文から、menu テーブルのすべてのレコードを取得すればよいとわかる。
SELECT * FROM テーブル名 で、テーブル名 のテーブルのすべてのレコードを取得することができる
よって、SELECT * FROM menu; と書く*/

step4　カテゴリを取得しよう
SELECT * FROM category;
/*問題文から、category テーブルのすべてのレコードを取得すればよいとわかる
SELECT * FROM テーブル名 で、テーブル名 のテーブルのすべてのレコードを取得することができる
よって、SELECT * FROM category; と書く*/

final　会員のリストを取得しよう
SELECT * FROM customer;
/*問題文から、customer テーブルのすべてのレコードを取得すればよいとわかる.
SELECT * FROM テーブル名 で、テーブル名 のテーブルのすべてのレコードを取得することができる
よって、SELECT * FROM customer; と書く*/

<漢字名、ひらがな、入会日、居住地を取得しよう>
step1　合計金額を取得しよう
SELECT bill FROM ordered;
/*問題文から、ordered テーブルの bill カラムを取得すればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT bill FROM ordered; と書く*/
  
step2　注文番号を取得しよう
SELECT ordered_id FROM ordered_menu;
/*問題文から、ordered_menu テーブルの ordered_id カラムを取得すればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT ordered_id FROM ordered_menu; と書く*/

step3　メニュー名を取得しよう
SELECT name FROM menu;
/*問題文から、menu テーブルの name カラムを取得すればよいとわかる
  SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT name FROM menu; と書く*/

step4　カテゴリ名を取得しよう
SELECT name FROM category;
/*問題文から、category テーブルの name カラムを取得すればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT name FROM category; と書く*/

step5　居住地を取得しよう
SELECT residence FROM customer;
/*問題文から、customer テーブルの residence カラムを取得すればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT residence FROM customer; と書く*/

step6　注文数、小計を取得しよう
SELECT num, sum FROM ordered_menu;
/*問題文から、ordered_menu テーブルの num カラムと sum カラムを取得すればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT num, sum FROM ordered_menu; と書く*/

step7　メニュー名、価格を取得しよう
SELECT name, price FROM menu;
/*問題文から、menu テーブルの name カラムと price カラムを取得すればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT name, price FROM menu; と書く*/

step8　漢字名、ふりがなを取得しよう
SELECT name, name_yomi FROM customer;
/*問題文から、customer テーブルの name カラムと name_yomi カラムを取得すればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT name, name_yomi FROM customer; と書く*/

step9　注文番号、メニュー番号、注文数を取得しよう
SELECT ordered_id, menu_id, num FROM ordered_menu;
/*問題文から、ordered_menu テーブルの ordered_id カラムと menu_id カラム、num カラムを取得すればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT ordered_id, menu_id, num FROM ordered_menu; と書く*/

final　漢字名、ふりがな、入会日、居住地を取得しよう
SELECT name, name_yomi, join_date, residence FROM customer;
/*問題文から、customer テーブルの name カラムと name_yomi カラム、join_date カラム、residence カラムを取得すればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT name, name_yomi, join_date, residence FROM customer; と書く*/

<メニューを安い順に並べ替えよう>
step1　合計金額の昇順に並べ替えよう
SELECT * FROM ordered ORDER BY bill;
/*問題文から、ordered テーブルのすべてのレコードを、bill カラムの値の昇順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
よって、SELECT * FROM ordered ORDER BY bill; と書く*/

step2　注文数の昇順に並べ替えよう
SELECT * FROM ordered_menu ORDER BY num;
/*問題文から、ordered_menu テーブルのすべてのレコードを、num カラムの値の昇順に並べ替えればよいとわかる*
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
よって、SELECT * FROM ordered_menu ORDER BY num; と書く*/

step3　カテゴリ番号の昇順に並べ替えよう
SELECT * FROM category ORDER BY category_id;
/*問題文から、category テーブルのすべてのレコードを、category_id カラムの昇順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
よって、SELECT * FROM category ORDER BY category_id; と書く*/

step4　小計の昇順に並べ替えよう
SELECT ordered_id, sum FROM ordered_menu ORDER BY sum;
/*問題文から、
category テーブルの ordered_id カラムと sum カラムを取得する
sum カラムの昇順に並べ替える
ことをすればよいとわかる
SELECT ordered_id, sum FROM ordered_menu ORDER BY sum;
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
よって、SELECT ordered_id, sum FROM ordered_menu ORDER BY sum; と書く
*/

step5　カテゴリ番号の昇順に並べ替えよう
SELECT category_id, name FROM menu ORDER BY category_id;
/*問題文から、
category テーブルの category_id カラムと name カラムを取得する
category_id カラムの昇順に並べ替える
ことをすればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
よって、SELECT category_id, name FROM menu ORDER BY category_id; と書く*/

step6　通し番号の昇順に並べ替えよう
SELECT customer_id, name, residence FROM customer ORDER BY customer_id;
/*問題文から、
customer テーブルの customer_id カラムと name カラム、residence カラムを取得する
customer_id カラムの昇順に並べ替える
ことをすればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
よって、SELECT customer_id, name, residence FROM customer ORDER BY customer_id; と書く*/

final　メニューを安い順に並べ替えよう
SELECT * FROM menu ORDER BY price;
/*問題文の「価格の安い順」は「価格の昇順」と読み替えることができる
つまり、menu テーブルのすべてのレコードを price カラムの昇順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
よって、SELECT * FROM menu ORDER BY price; と書く*/

<合計金額の高い順に並べ替えよう>
step1　注文数の降順に並べ替えよう
SELECT * FROM ordered_menu ORDER BY num DESC;
/*問題文から、ordered_menu テーブルのすべてのレコードを、num カラムの値の降順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 DESC で、レコードを カラム名 カラムの値の降順に並べ替えることができる
よって、SELECT * FROM ordered_menu ORDER BY num DESC; と書く*/

step2　カテゴリ番号の降順に並べ替えよう
SELECT * FROM category ORDER BY category_id DESC;
/*問題文から、category テーブルのすべてのレコードを、category_id カラムの値の降順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 DESC で、レコードを カラム名 カラムの値の降順に並べ替えることができる
よって、SELECT * FROM category ORDER BY category_id DESC; と書く*/

step3　価格の降順に並べ替えよう
SELECT * FROM menu ORDER BY price DESC;
/*問題文から、menu テーブルのすべてのレコードを、price カラムの値の降順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 DESC で、レコードを カラム名 カラムの値の降順に並べ替えることができる
よって、SELECT * FROM menu ORDER BY price DESC; と書く*/

step4　小計の降順に並べ替えよう
SELECT ordered_id, sum FROM ordered_menu ORDER BY sum DESC;
/*問題文から、
ordered_menu テーブルの ordered_id カラムと sum カラムを取得する
sum カラムの降順に並べ替える
ことをすればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名 DESC で、レコードを カラム名 カラムの値の降順に並べ替えることができる
よって、SELECT ordered_id, sum FROM ordered_menu ORDER BY sum DESC; と書く*/

step5　注文番号の降順に並べ替えよう
SELECT ordered_id, datetime FROM ordered ORDER BY ordered_id DESC;
/*問題文から、
ordered テーブルの ordered_id カラムと datetime カラムを取得する
ordered_id カラムの降順に並べ替える
ことをすればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名 DESC で、レコードを カラム名 カラムの値の降順に並べ替えることができる
よって、SELECT ordered_id, datetime FROM ordered ORDER BY ordered_id DESC; と書く*/

step6　通し番号の降順に並べ替えよう
SELECT customer_id, name, name_yomi FROM customer ORDER BY customer_id DESC;
/*問題文から、
customer テーブルの customer_id カラムと name カラム、name_yomi カラムを取得する
customer_id カラムの降順に並べ替える
ことをすればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名 DESC で、レコードを カラム名 カラムの値の降順に並べ替えることができる
よって、SELECT customer_id, name, name_yomi FROM customer ORDER BY customer_id DESC; と書く*/

final　合計金額の高い順に並べ替えよう
SELECT * FROM ordered ORDER BY bill DESC;
/*問題文の「注文の合計金額の高い順」は「注文の合計金額の降順」と読み替えることができる
つまり、ordered テーブルのすべてのレコードを bill カラムの降順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 DESC で、レコードを カラム名 カラムの値の降順に並べ替えることができる
よって、SELECT * FROM ordered ORDER BY bill DESC; と書く*/

<入会した順に並べ替えよう>
step1　日時の昇順に並べ替えよう
SELECT * FROM ordered ORDER BY datetime;
/*問題文から、ordered テーブルのすべてのレコードを、datetime カラムの値の昇順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
カラムの値が整数でないときも並べ替えることができる
今回は日時の並べ替え
よって、SELECT * FROM ordered ORDER BY datetime; と書く*/

step2　カテゴリ名の昇順に並べ替えよう
SELECT * FROM category ORDER BY name;
/*問題文から、category テーブルのすべてのレコードを、name カラムの値の昇順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
カラムの値が整数でないときも並べ替えることができる
今回は文字列の並べ替え
よって、SELECT * FROM category ORDER BY name; と書く
【 補足 】
日本語の文字列を ORDER BY で並べ替える場合、環境によって並べ替えた結果が変わることがあります。
たとえば、データベースで使用している文字コードが異なる場合、結果が異なることがあります。
データベースで使用している文字コードは、SHOW CREATE DATABASE "データベース名" で確認できます。
SQL ドリルの各問題では、test という名前のデータベースを使っています。*/

step3　ふりがなの昇順に並べ替えよう
SELECT * FROM customer ORDER BY name_yomi;
/*問題文から、customer テーブルのすべてのレコードを、name_yomi カラムの値の昇順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
カラムの値が整数でないときも並べ替えることができる
今回は文字列の並べ替え
よって、SELECT * FROM customer ORDER BY name_yomi; と書く*/

step4　メニュー名の昇順に並べ替えよう
SELECT name, price FROM menu ORDER BY name;
/*問題文から、
menu テーブルの name カラムと price カラムを取得する
name カラムの昇順に並べ替える
ことをすればよいとわかる

SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
カラムの値が整数でないときも並べ替えることができる
今回は文字列の並べ替え
よって、SELECT name, price FROM menu ORDER BY name; と書く*/

step5　漢字名の昇順に並べ替えよう
SELECT name, name_yomi FROM customer ORDER BY name;
/*問題文から、
customer テーブルの name カラムと name_yomi カラムを取得する
name カラムの昇順に並べ替える
ことをすればよいとわかる
基本的に、漢字を昇順に並べ替えようとしても辞書順にならない
これは、漢字に割り振られた文字コードを見て、並べ替えをおこなっているため
文字コードとは、文字に割り振られる一意の値のことで、コンピュータが文字を扱うために使われる

SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
カラムの値が整数でないときも並べ替えることができる
今回は文字列の並べ替え
よって、SELECT name, name_yomi FROM customer ORDER BY name; と書く*/

final　入会した順に並べ替えよう
SELECT * FROM customer ORDER BY join_date;
/*問題文の「入会日が早い順」は「入会日の昇順」と読み替えることができる
つまり、customer テーブルのすべてのレコードを join_date カラムの昇順に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
カラムの値が整数でないときも並べ替えることができる
今回は日付の並べ替え
よって、SELECT * FROM customer ORDER BY join_date; と書く*/

<注文番号、小計、メニュー番号についての条件で並べ替えよう>
step1　注文番号、注文数についての条件で並べ替えよう
SELECT * FROM ordered_menu ORDER BY ordered_id, num DESC;
/*問題文から、ordered_menu テーブルのすべてのレコードを
ordered_id カラムの昇順
そして ordered_id カラムの値が同じとき、num カラムの降順
に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名1, カラム名2 DESC で、レコードを
カラム名1 カラムの値の昇順
そして カラム名1 カラムの値が同じとき、カラム名2 カラムの値の降順
に並べ替えることができる
よって、SELECT * FROM ordered_menu ORDER BY ordered_id, num DESC; と書く*/

step2　価格、メニュー名についての条件で並べ替えよう
SELECT * FROM menu ORDER BY price DESC, name;
/*問題文から、menu テーブルのすべてのレコードを
price カラムの降順
そして price カラムの値が同じとき、name カラムの昇順
に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名1 DESC, カラム名2 で、レコードを
カラム名1 カラムの値の降順
そして カラム名1 カラムの値が同じとき、カラム名2 カラムの値の昇順
に並べ替えることができる
よって、SELECT * FROM menu ORDER BY price DESC, name; と書く*/

step3　注文数、小計についての条件で並べ替えよう
SELECT ordered_id, num, sum FROM ordered_menu ORDER BY num DESC, sum DESC;
/*問題文から、ordered_menu テーブルのすべてのレコードを
num カラムの降順
そして num カラムの値が同じとき、sum カラムの降順
に並べ替えればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名1 DESC, カラム名2 DESC で、レコードを
カラム名1 カラムの値の降順
そして カラム名1 カラムの値が同じとき、カラム名2 カラムの値の降順
に並べ替えることができる
よって、SELECT ordered_id, num, sum FROM ordered_menu ORDER BY num DESC, sum DESC; と書く*/

step4　入会日、名前（ふりがな）についての条件で並べ替えよう
SELECT join_date, name, name_yomi FROM customer ORDER BY join_date, name_yomi;
/*問題文から、customer テーブルのすべてのレコードを
join_date カラムの昇順
そして join_date カラムの値が同じとき、name_yomi カラムの昇順
に並べ替えればよいとわかる

SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名1, カラム名2 で、レコードを
カラム名1 カラムの値の昇順
そして カラム名1 カラムの値が同じとき、カラム名2 カラムの値の昇順
に並べ替えることができる
よって、SELECT join_date, name, name_yomi FROM customer ORDER BY join_date, name_yomi; と書く*/

final　注文番号、小計、メニュー番号についての条件で並べ替えよう
SELECT * FROM ordered_menu ORDER BY ordered_id DESC, sum DESC, menu_id;
/*問題文から、ordered_menu テーブルのすべてのレコードを
ordered_id カラムの降順
そして ordered_id カラムの値が同じとき、sum カラムの降順
さらに sum カラムの値も同じとき、menu_id カラムの昇順
に並べ替えればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名1 DESC, カラム名2 DESC, カラム名3 で、レコードを
カラム名1 カラムの値の降順
そして カラム名1 カラムの値が同じとき、カラム名2 カラムの値の降順
さらに カラム名3 カラムの値が同じとき、カラム名3 カラムの値の昇順
に並べ替えることができる
よって、SELECT * FROM ordered_menu ORDER BY ordered_id DESC, sum DESC, menu_id; と書く*/

<価格の高い順に10件取得しよう>
step1　上から50件を取得しよう
SELECT * FROM ordered_menu LIMIT 50;
/*問題文から、ordered_menu テーブルの上から 50 件のレコードを取得すればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
LIMIT 件数 で、上から 件数 件を取得することができる
よって、SELECT * FROM ordered_menu LIMIT 50; と書く*/

step2　上から25件を取得しよう
SELECT ordered_id, num, sum FROM ordered_menu LIMIT 25;
/*問題文から、ordered_menu テーブルの上から 25 件のレコードを取得すればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
LIMIT 件数 で、上から 件数 件を取得することができる
よって、SELECT ordered_id, num, sum FROM ordered_menu LIMIT 25; と書く*/

step3　昇順に並べ替えて、上位10件を取得しよう
SELECT * FROM ordered ORDER BY bill LIMIT 10;
/*問題文から、
ordered テーブルのすべてのレコードを、bill カラムの値の昇順に並べ替える
上から 10 件取得する
ことをすればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 で、レコードを カラム名 カラムの値の昇順に並べ替えることができる
LIMIT 件数 で、上から 件数 件を取得することができる
よって、SELECT * FROM ordered ORDER BY bill LIMIT 10; と書く*/

step4　降順に並べ替えて、上位100件を取得しよう
SELECT ordered_id, num, sum FROM ordered_menu ORDER BY sum DESC LIMIT 100;
/*問題文から、
ordered_menu テーブルの ordered_id カラムと num カラム、sum カラムを取得する
sum カラムの値の降順に並べ替える
上から 100 件取得する
ことをすればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名 DESC で、レコードを カラム名 カラムの値の降順に並べ替えることができる
LIMIT 件数 で、上から 件数 件を取得することができる
よって、SELECT ordered_id, num, sum FROM ordered_menu ORDER BY sum DESC LIMIT 100; と書く*/

step5　複数の条件で並べ替えて、上位5件を取得しよう
SELECT * FROM menu ORDER BY price, name LIMIT 5;
/*問題文から、
ordered_menu テーブルのすべてのレコードを
price カラムの昇順
そして price カラムの値が同じとき、name カラムの昇順
に並べ替える
上から 5 件取得する
ことをすればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名1, カラム名2 で、レコードを
カラム名1 カラムの値の昇順
そして カラム名1 カラムの値が同じとき、カラム名2 カラムの値の昇順
に並べ替えることができる
LIMIT 件数 で、上から 件数 件を取得することができる
よって、SELECT * FROM menu ORDER BY price, name LIMIT 5; と書く*/

step6  複数の条件で並べ替えて、上位30件を取得しよう
SELECT name, name_yomi, join_date FROM customer ORDER BY join_date DESC, name_yomi LIMIT 30;
/*問題文から、
customer テーブルのすべてのレコードを
join_date カラムの降順
そして join_date カラムの値が同じとき、name_yomi カラムの昇順
に並べ替える
上から 30 件取得する
ことをすればよいとわかる
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
ORDER BY カラム名1 DESC, カラム名2 で、レコードを
カラム名1 カラムの値の降順
そして カラム名1 カラムの値が同じとき、カラム名2 カラムの値の昇順
に並べ替えることができる
LIMIT 件数 で、上から 件数 件を取得することができる
よって、SELECT name, name_yomi, join_date FROM customer ORDER BY join_date DESC, name_yomi LIMIT 30; と書く*/

final　価格の高い順に10件取得しよう
SELECT * FROM menu ORDER BY price DESC LIMIT 10;
/*問題文の「価格の高い順に 10 件」は「価格の降順の上から 10 件」と読み替えることができる
つまり
menu テーブルのすべてのレコードを、price カラムの昇順に並べ替える
上から 10 件取得する
ことをすればよいとわかる
SELECT * FROM テーブル名 で テーブル名 のテーブルのすべてのレコードを取得することができる
ORDER BY カラム名 DESC で、レコードを カラム名 カラムの値の降順に並べ替えることができる
LIMIT 件数 で、上から 件数 件を取得することができる
よって、SELECT * FROM menu ORDER BY price DESC LIMIT 10; と書く*/

新・SQL入門編03ドリル
<バーガーを全種類取得しよう>
step1　日時を指定して取得しよう
SELECT * FROM ordered WHERE datetime = "2021-12-17 13:37:00";
/*問題文から、ordered テーブルの datetime カラムの値が 2021-12-17 13:37:00 であるレコードを取得すればよいとわかる
WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE datetime = "2021-12-17 13:37:00"; と書く*/

step2　メニュー番号を指定して取得しよう
SELECT menu_id, num FROM ordered_menu WHERE menu_id = 9;
/*問題文から、ordered_menu テーブルについて、
menu_id カラムと num カラムを取得する
menu_id カラムの値が 9 であるレコードを絞り込む
ことをすればよいとわかる
WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
よって、SELECT menu_id, num FROM ordered_menu WHERE menu_id = 9; と書く*/

step3　価格を指定して取得しよう
SELECT * FROM menu WHERE price = 250 ORDER BY name;
/*問題文から、menu テーブルについて、
price カラムの値が 250 であるレコードを絞り込む
name カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
よって、SELECT * FROM menu WHERE price = 250 ORDER BY name; と書く*/

step4　カテゴリ番号を指定して取得しよう
SELECT name, price FROM menu WHERE category_id = 4 ORDER BY price DESC;
/*問題文から、menu テーブルについて、
name カラムと price カラムを取得する
category_id カラムの値が 4 であるレコードを絞り込む
price カラムの降順に並べ替える
ことをすればよいとわかる
WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
よって、SELECT name, price FROM menu WHERE category_id = 4 ORDER BY price DESC; と書く*/

step5　入会日を指定して取得しよう
SELECT customer_id, name, name_yomi, residence FROM customer WHERE join_date = "2021-10-15" ORDER BY name_yomi LIMIT 2;
/*問題文から、customer テーブルについて、
customer_id カラムと name カラム、name_yomi カラム、residence カラムを取得する
join_date カラムの値が 2021-10-15 であるレコードを絞り込む
name_yomi カラムの昇順に並べ替える
上位 2 件を取得する
ことをすればよいとわかる問題文から、customer テーブルについて、
customer_id カラムと name カラム、name_yomi カラム、residence カラムを取得する
join_date カラムの値が 2021-10-15 であるレコードを絞り込む
name_yomi カラムの昇順に並べ替える
上位 2 件を取得する
ことをすればよいとわかる

WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
よって、SELECT customer_id, name, name_yomi, residence FROM customer WHERE join_date = "2021-10-15" ORDER BY name_yomi LIMIT 2; と書く
【 補足 】
日本語の文字列を ORDER BY で並べ替える場合、環境によって並べ替えた結果が変わることがあります。
たとえば、データベースで使用している文字コードが異なる場合、結果が異なることがあります。
データベースで使用している文字コードは、SHOW CREATE DATABASE "データベース名" で確認できます。
SQL ドリルの各問題では、test という名前のデータベースを使っています。*/

final　バーガーを全種類取得しよう
SELECT * FROM menu WHERE category_id = 1 ORDER BY price DESC;
/*問題文は、
「カテゴリがバーガーのメニュー」=「menu テーブルの category_id が 1 のレコード」
「価格の高い順」=「price カラムの降順」
と読み替えることができる
つまり、menu テーブルについて、
category_id カラムの値が 1 であるレコードを絞り込む
price カラムの降順に並べ替える
ことをすればよいとわかる
WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
よって、SELECT * FROM menu WHERE category_id = 1 ORDER BY price DESC; と書く*/

<入会日を指定して取得しよう>
step1　日時を指定して取得しよう
SELECT * FROM ordered WHERE datetime <> "2021-12-17 18:28:00";
/*問題文から、ordered テーブルの datetime カラムの値が 2021-12-17 18:28:00 でないレコードを取得すればよいとわかる
WHERE カラム名 <> 値 で、カラム名 カラムの値が 値 でないレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE datetime <> "2021-12-17 18:28:00"; と書く*/

step2　メニュー番号を指定して取得しよう
SELECT ordered_id, num FROM ordered_menu WHERE menu_id <> 12;
/*問題文から、ordered_menu テーブルについて、
ordered_id カラムと num カラムを取得する
menu_id カラムの値が 12 でないレコードを絞り込む
ことをすればよいとわかる
WHERE カラム名 <> 値 で、カラム名 カラムの値が 値 でないレコードを絞り込むことができる
よって、SELECT ordered_id, num FROM ordered_menu WHERE menu_id <> 12; と書く*/

step3　注文数を指定して取得しよう
SELECT * FROM ordered_menu WHERE num <> 1 ORDER BY num;
/*問題文から、ordered_menu テーブルについて、
num カラムの値が 1 でないレコードを絞り込む
num カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 <> 値 で、カラム名 カラムの値が 値 でないレコードを絞り込むことができる
よって、SELECT * FROM ordered_menu WHERE num <> 1 ORDER BY num; と書く*/

step4　カテゴリ番号を指定して取得しよう
SELECT category_id, name, price FROM menu WHERE category_id <> 3 ORDER BY name;
/*問題文から、menu テーブルについて、
category_id カラムと name カラム、price カラムを取得する
category_id カラムの値が 3 でないレコードを絞り込む
name カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 <> 値 で、カラム名 カラムの値が 値 でないレコードを絞り込むことができる
よって、SELECT category_id, name, price FROM menu WHERE category_id <> 3 ORDER BY name; と書く*/

step5　居住地を指定して取得しよう
SELECT customer_id, name, name_yomi, residence FROM customer WHERE residence <> "東京都" ORDER BY name_yomi LIMIT 30;
/*問題文から、customer テーブルについて、
customer_id カラムと name カラム、name_yomi カラム、residence カラムを取得する
residence カラムの値が 東京都 でないレコードを絞り込む
name_yomi カラムの昇順に並べ替える
上位 30 件を取得する
ことをすればよいとわかる
WHERE カラム名 <> 値 で、カラム名 カラムの値が 値 でないレコードを絞り込むことができる
よって、SELECT customer_id, name, name_yomi, residence FROM customer WHERE residence <> "東京都" ORDER BY name_yomi LIMIT 30; と書く*/

final　入会日を指定して取得しよう
SELECT * FROM customer WHERE join_date <> "2021-05-13" ORDER BY name_yomi LIMIT 30;
/*問題文は、
「2021-05-13 に入会していない会員」=「join_date カラムの値が 2021-05-13 でない会員」
「名前の辞書順」=「name_yomi カラムの昇順」
と読み替えることができる
つまり、menu テーブルについて、
join_date カラムの値が 2021-05-13 でないレコードを絞り込む
name_yomi カラムの昇順に並べ替える
上位 30 件を取得する
ことをすればよいとわかる
WHERE カラム名 <> 値 で、カラム名 カラムの値が 値 でないレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE join_date <> "2021-05-13" ORDER BY name_yomi LIMIT 30; と書く*/

<注文時刻を指定して取得しよう>
step1　日時を指定して取得しよう
SELECT * FROM ordered WHERE datetime < "2021-12-17 11:59:00";
/*問題文から、ordered テーブルの datetime カラムの値が 2021-12-17 11:59:00 より小さいレコードを取得すればよいとわかる
WHERE カラム名 < 値 で、カラム名 カラムの値が 値 より小さいレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE datetime < "2021-12-17 11:59:00"; と書く*/

step2　日時を指定して取得しよう(Part2)
SELECT * FROM ordered WHERE datetime <= "2021-12-17 11:59:00";
/*問題文から、ordered テーブルの datetime カラムの値が 2021-12-17 11:59:00 以下のレコードを取得すればよいとわかる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE datetime <= "2021-12-17 11:59:00"; と書く*/

step3　小計を指定して取得しよう
SELECT menu_id, sum FROM ordered_menu WHERE sum < 500;
/*問題文から、ordered_menu テーブルについて、
menu_id カラムと sum カラムを取得する
sum カラムの値が 500 より小さいレコードを絞り込む
ことをすればよいとわかる
WHERE カラム名 < 値 で、カラム名 カラムの値が 値 より小さいレコードを絞り込むことができる
よって、SELECT menu_id, sum FROM ordered_menu WHERE sum < 500; と書く*/

step4　注文数を指定して取得しよう
SELECT ordered_id, num, sum FROM ordered_menu WHERE num <= 3 ORDER BY sum;
/*問題文から、ordered_menu テーブルについて、
ordered_id カラムと num カラム、sum カラムを取得する
num カラムの値が 3 以下のレコードを絞り込む
sum カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
よって、SELECT ordered_id, num, sum FROM ordered_menu WHERE num <= 3 ORDER BY sum; と書く*/

step5　合計金額を指定して取得しよう
SELECT * FROM ordered WHERE bill <= 750 ORDER BY datetime LIMIT 10;
/*問題文から、ordered テーブルについて、
bill カラムの値が 750 以下のレコードを絞り込む
datetime カラムの昇順に並べ替える
上位 10 件を取得する
ことをすればよいとわかる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE bill <= 750 ORDER BY datetime LIMIT 10; と書く*/

step6　メニュー名を指定して取得しよう
SELECT name, price FROM menu WHERE name < "タ" ORDER BY price DESC LIMIT 10;
/*問題文から、menu テーブルについて、
name カラムと price カラムを取得する
name カラムの値が タ より小さいレコードを絞り込む
price カラムの降順に並べ替える
上位 10 件を取得する
ことをすればよいとわかる
WHERE カラム名 < 値 で、カラム名 カラムの値が 値 より小さいレコードを絞り込むことができる
よって、SELECT name, price FROM menu WHERE name < "タ" ORDER BY price DESC LIMIT 10; と書く*/

step7  入会日を指定して取得しよう
SELECT name, name_yomi, join_date FROM customer WHERE join_date < "2021-12-17" ORDER BY join_date, name_yomi LIMIT 25;
/*問題文から、customer テーブルについて、
name カラムと name_yomi カラム、join_date カラムを取得する
join_date カラムの値が 2021-12-17 より小さいレコードを絞り込む
並びを、
join_date カラムの昇順
join_date カラムの値が同じとき、name_yomi カラムの昇順
に並べ替える
上位 25 件を取得する
ことをすればよいとわかる
WHERE カラム名 < 値 で、カラム名 カラムの値が 値 より小さいレコードを絞り込むことができる
よって、SELECT name, name_yomi, join_date FROM customer WHERE join_date < "2021-12-17" ORDER BY join_date, name_yomi LIMIT 25; と書く*/

final　注文時刻を指定して取得しよう
SELECT * FROM ordered WHERE datetime <= "2021-12-17 12:05:00" ORDER BY datetime DESC LIMIT 10;
/*問題文から
「日時が 2021-12-17 12:05:00 以前の注文履歴」=「datetime カラムの値が 2021-12-17 12:05:00 以下のレコード」
「日時が 2021-12-17 12:05:00 以前の注文履歴のなかで、2021-12-17 12:05:00 から最も近い 10 件」=「上の条件で絞り込んで、datetime カラムの降順に並べ替えた上位 10 件」と考えることができる（補足）
つまり、ordered テーブルについて、
datetime カラムの値が 2021-12-17 12:05:00 以下のレコードを絞り込む
datetime カラムの降順に並べ替える
上位 10 件を取得する
ことをすればよいとわかる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE datetime >= "2021-12-17 12:05:00" ORDER BY datetime LIMIT 10; と書く*/

<合計金額が813円に近い注文履歴を取得しよう>
step1　注文数を指定して取得しよう
SELECT * FROM ordered_menu WHERE num > 3;
/*問題文から、ordered_menu テーブル の num カラムの値が 3 より大きいレコードを取得すればよいとわかる
WHERE カラム名 > 値 で、カラム名 カラムの値が 値 より大きいレコードを絞り込むことができる
よって、SELECT * FROM ordered_menu WHERE num > 3; と書く*/

step2　注文数を指定して取得しよう(Part2)
SELECT * FROM ordered_menu WHERE num >= 3;
/*問題文から、ordered_menu テーブル の num カラムの値が 3 以上のレコードを取得すればよいとわかる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
よって、SELECT * FROM ordered_menu WHERE num >= 3; と書く*/

step3　小計を指定して取得しよう
SELECT menu_id, sum FROM ordered_menu WHERE sum >= 1200 ORDER BY sum DESC;
/*問題文から、ordered_menu テーブルについて、
menu_id カラムと sum カラムを取得する
sum カラムの値が 1200 以上のレコードを絞り込む
sum カラムの降順に並べ替える
ことをすればよいとわかる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
よって、SELECT menu_id, sum FROM ordered_menu WHERE sum >= 1200 ORDER BY sum DESC; と書く*/

step4　注文数を指定して取得しよう
SELECT * FROM customer WHERE join_date > "2021-12-31" ORDER BY join_date, name_yomi;
/*問題文から、customer テーブルについて、
join_date カラムの値が 2021-12-31 より大きいレコードを絞り込む
並びを、
join_date カラムの昇順
join_date カラムの値が同じとき、name_yomi カラムの昇順
に並べ替える
ことをすればよいとわかる
WHERE カラム名 > 値 で、カラム名 カラムの値が 値 より大きいレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE join_date > "2021-12-31" ORDER BY join_date, name_yomi; と書く*/

step5　合計金額を指定して取得しよう
SELECT * FROM ordered WHERE bill >= 1750 ORDER BY datetime LIMIT 3;
/*問題文から、ordered テーブルについて、
bill カラムの値が 1750 以上のレコードを絞り込む
datetime カラムの昇順に並べ替える
上位 3 件を取得する
ことをすればよいとわかる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE bill >= 1750 ORDER BY datetime LIMIT 3; と書く*/

step6　メニュー名を指定して取得しよう
SELECT name, price FROM menu WHERE name >= "ハ" ORDER BY price DESC LIMIT 10;
/*問題文から、menu テーブルについて、
name カラムと price カラムを取得する
name カラムの値が ハ 以上のレコードを絞り込む
price カラムの降順に並べ替える
上位 10 件を取得する
ことをすればよいとわかる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
よって、SELECT name, price FROM menu WHERE name >= "ハ" ORDER BY price DESC LIMIT 10; と書く*/

step7  日時を指定して取得しよう
SELECT * FROM ordered WHERE datetime >= "2021-12-17 17:00:00" ORDER BY bill DESC, datetime, ordered_id LIMIT 30;
/*問題文から、ordered テーブルについて、
name カラムの値が 2021-12-17 17:00:00 以上のレコードを絞り込む
並びを、
bill カラムの降順
bill カラムの値が同じとき、datetime カラムの昇順
datetime カラムの値も同じとき、ordered_id カラムの昇順
に並べ替える
上位 30 件を取得する
ことをすればよいとわかる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE datetime >= "2021-12-17 17:00:00" ORDER BY bill DESC, datetime, ordered_id LIMIT 30; と書く*/

final　合計金額が813円に近い注文履歴を取得しよう
SELECT ordered_id FROM ordered WHERE bill >= 813 ORDER BY bill LIMIT 1;
/*「注文した合計金額が 813 円に最も近い人 1 人」の候補は次の方法で求めることができる
【 合計金額 ≦ 813 】
合計金額が 813 円以下のレコードを絞り込む
合計金額の降順に並べ替える
上位 1 件を取得する
【 合計金額 ≧ 813 】
合計金額が 813 円以上のレコードを絞り込む
合計金額の昇順に並べ替える
上位 1 件を取得する
今回、「813 円未満の注文はキャンペーンの対象外」なため、下段の方法を用いて取得すればよいと考えることができる
つまり、ordered テーブルについて。
ordered_id カラムを取得する
bill カラムの値が 813 以上のレコードを絞り込む
bill カラムの昇順に並べ替える
上位 1 件を取得する
ことをすればよいとわかる

WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
よって、SELECT ordered_id FROM ordered WHERE bill >= 813 ORDER BY bill LIMIT 1; と書く*/

<居住地を指定して取得しよう>
final  居住地を指定して取得しよう
SELECT * FROM customer WHERE residence IS NULL;
/*問題文から、customer テーブルの num カラムの値が NULL であるレコードを取得すればよいとわかる
WHERE カラム名 IS NULL で、カラム名 カラムの値が NULL であるレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE residence IS NULL; と書く*/

<居住地を指定して取得しよう>
final　居住地を指定して取得しよう
SELECT * FROM customer WHERE residence IS NOT NULL;
/*問題文から、customer テーブルの num カラムの値が NULL でないレコードを取得すればよいとわかる
WHERE カラム名 IS NOT NULL で、カラム名 カラムの値が NULL でないレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE residence IS NOT NULL; と書く*/

<12時台の注文履歴を取得しよう>
step1　合計金額の範囲を指定して取得しよう
SELECT * FROM ordered WHERE bill BETWEEN 100 AND 499;
/*問題文から、ordered テーブルの bill カラムの値が 100 と 499 の間に含まれるレコードを取得すればよいとわかる
WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE bill BETWEEN 100 AND 499; と書く*/

step2　入会日の範囲を指定して取得しよう
SELECT name, name_yomi, join_date FROM customer WHERE join_date BETWEEN "2021-08-13" AND "2021-09-13" ORDER BY name_yomi;
/*問題文から、customer テーブルについて、
name カラムと name_yomi カラム、join_date カラムを取得する
join_date カラムの値が 2021-08-13 と 2021-09-13 の間に含まれるレコードを絞り込む
name_yomi カラムの昇順に並べ替える
ことをすればよいとわかる

WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
よって、SELECT name, name_yomi, join_date FROM customer WHERE join_date BETWEEN "2021-08-13" AND "2021-09-13" ORDER BY name_yomi; と書く*/

step3　メニュー名の範囲を指定して取得しよう
SELECT * FROM menu WHERE name BETWEEN "エ" AND "ス" ORDER BY name LIMIT 5;
/*問題文から、menu テーブルについて、
name カラムの値が タ と マ の間に含まれるレコードを絞り込む
name カラムの昇順に並べ替える
上位 5 件を取得する
ことをすればよいとわかる

WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
よって、SELECT * FROM menu WHERE name BETWEEN "エ" AND "ス" ORDER BY name LIMIT 5; と書く*/

step4　小計を範囲指定して取得しよう
SELECT * FROM ordered_menu WHERE sum BETWEEN 500 AND 700 ORDER BY sum DESC, num;
/*問題文から、ordered_menu テーブルについて、
sum カラムの値が 500 と 700 の間に含まれるレコードを絞り込む
並びを、
sum カラムの降順
sum カラムの値が同じとき、num カラムの昇順
に並べ替える
ことをすればよいとわかる

WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
よって、SELECT * FROM ordered_menu WHERE sum BETWEEN 500 AND 700 ORDER BY sum DESC, num; と書く*/

step5　価格を範囲指定して取得しよう
SELECT category_id, name, price FROM menu WHERE price BETWEEN 100 AND 300 ORDER BY category_id, price;
/*問題文から、menu テーブルについて、
category_id カラムと name カラム、price カラムを取得する
price カラムの値が 100 と 300 の間に含まれるレコードを絞り込む
並びを、
category_id カラムの昇順
category_id カラムの値が同じとき、price カラムの昇順
に並べ替える
ことをすればよいとわかる

WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
よって、SELECT category_id, name, price FROM menu WHERE price BETWEEN 100 AND 300 ORDER BY category_id, price; と書く*/

step6　会員名の範囲を指定して取得しよう
SELECT name, name_yomi, join_date FROM customer WHERE name_yomi BETWEEN "ヌ" AND "メ" ORDER BY join_date, name_yomi LIMIT 20;
/*問題文から、customer テーブルについて、
name カラムと name_yomi カラム、join_date カラムを取得する
name_yomi カラムの値が ヌ と メ の間に含まれるレコードを絞り込む
並びを、
join_date カラムの昇順
join_date カラムの値が同じとき、name_yomi カラムの昇順
に並べ替える
上位 20 件を取得する
ことをすればよいとわかる

WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
よって、SELECT name, name_yomi, join_date FROM customer WHERE name_yomi BETWEEN "ヌ" AND "メ" ORDER BY join_date, name_yomi LIMIT 20; と書く*/

final　12時台の注文履歴を取得しよう
SELECT * FROM ordered WHERE datetime BETWEEN "2021-12-17 12:00:00" AND ADDTIME("2021-12-17 12:00:00", "00:59:59");
/*問題文の「12 時台の注文履歴」は「12:00:00 と 12:59:59 の間に含まれる注文履歴」と読み替えることができる
つまり、ordered テーブルの datetime カラムの値が 2021-12-17 12:00:00 と 2021-12-17 12:59:59 の間に含まれるレコードを絞り込めばよいとわかる

WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE datetime BETWEEN "2021-12-17 12:00:00" AND "2021-12-17 12:59:59"; と書く*/

<午前中の1000円以上の注文履歴を取得しよう>
step1　合計金額を指定して取得しよう
SELECT * FROM ordered WHERE bill >= 100 AND bill <= 499;
/*問題文から、ordered テーブルの bill カラムの値が 100 円以上 499 円以下のレコードを取得すればよいとわかる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE bill >= 100 AND bill <= 499; と書く*/

step2　日時を指定して取得しよう
SELECT * FROM ordered WHERE datetime >= "2021-12-17 13:00:00" AND datetime <= "2021-12-17 17:00:00" ORDER BY ordered_id;
/*問題文から、ordered テーブルについて、
datetime カラムの値が 2021-12-17 13:00:00 以上 2021-12-17 17:00:00 円以下のレコードを絞り込む
ordered_id カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE datetime >= "2021-12-17 13:00:00" AND datetime <= "2021-12-17 17:00:00" ORDER BY ordered_id; と書く*/

step3　カテゴリ番号と価格を指定して取得しよう
SELECT name, price FROM menu WHERE category_id = 1 AND price < 300 ORDER BY price;
/*問題文から、menu テーブルについて、
name カラムと price カラムを取得する
次の条件をすべて満たすレコードを絞り込む
category_id の値が 1 である
price カラムの値が 300 より小さい
price カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 = 値 で、カラム名 カラムの値が 値 のレコードを絞り込むことができる
WHERE カラム名 < 値 で、カラム名 カラムの値が 値 より小さいレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT name, price FROM menu WHERE category_id = 1 AND price < 300 ORDER BY price; と書く*/

step4　複合的な条件を指定して取得しよう
SELECT join_date, name, name_yomi, residence FROM customer WHERE join_date <= "2021-05-13" AND name_yomi >= "ハ" AND residence IS NOT NULL ORDER BY join_date;
/*問題文から、customer テーブルについて、
join_date, name, name_yomi, residence カラムを取得する
次の条件をすべて満たすレコードを絞り込む
join_date カラムの値が 2021-05-13 以下である
name_yomi カラムの値が ハ 以上である
residence カラムの値が NULL でない
join_date カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE カラム名 IS NOT NULL で、カラム名 カラムの値が NULL でないレコードを絞り込むことができる
WHERE 条件1 AND 条件2 AND ... AND 条件n で、条件1 かつ 条件2 かつ ... かつ 条件n の条件を満たすレコードを絞り込むことができる
よって、SELECT join_date, name, name_yomi, residence FROM customer WHERE join_date <= "2021-05-13" AND name_yomi >= "ハ" AND residence IS NOT NULL ORDER BY join_date; と書く*/

step5　複合的な条件を指定して取得しよう(Part2)
SELECT * FROM ordered_menu WHERE ordered_id >= 212 AND menu_id BETWEEN 10 AND 13 AND num >= 2 ORDER BY menu_id, num DESC;
/*問題文で指定されている条件は、提示されている情報から次のように読み替えることができる
注文時刻が 2021-12-17 17:00:00 以降: ordered_id カラムの値が 212 以上
注文時刻が 2021-12-17 17:00:00 である注文の通し番号（ordered_id カラムの値）が 212 である
注文したメニューが フライドポテト 類: menu_id カラムの値が 10 以上 13 以下
フライドポテト類のメニュー番号は次のようになっている
フライドポテトS: 10
フライドポテトM: 11
フライドポテトL: 12
バケツポテト: 13
注文数が 2 個以上である: num カラムの値が 2 以上
つまり、ordered_menu テーブルについて、
次の条件をすべて満たすレコードを絞り込む
ordered_id カラムの値が 212 以上である
menu_id カラムの値が
10 以上 13 以下である
もしくは、10 と 13 の間に含まれる
num カラムの値が 2 以上である
並びを次のように並べ替える
menu_id カラムの昇順
menu_id カラムの値が同じとき、num カラムの降順
ことをすればよいとわかる

WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
WHERE 条件1 AND 条件2 AND ... AND 条件n で、条件1 かつ 条件2 かつ ... かつ 条件n の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM ordered_menu WHERE ordered_id >= 212 AND menu_id BETWEEN 10 AND 13 AND num >= 2 ORDER BY menu_id, num DESC; と書く*/

final　午前中の1000円以上の注文履歴を取得しよう
SELECT ordered_id FROM ordered WHERE datetime < "2021-12-17 12:00:00" AND bill >= 1000 ORDER BY bill DESC, datetime;
/*問題文で指定されている条件は、次のように読み替えることができる
「2021-12-17 の午前中の注文」=「datetime カラムの値が 2021-12-17 12:00:00 より小さい」
「注文の合計金額が 1000 円以上の注文」=「bill カラムの値が 1000 以上」
また、並べ替えの条件についても、次のように読み替えることができる
「合計金額が高い順」=「bill カラムの降順」
「注文日時が早い順」=「datetime カラムの昇順」
つまり、ordered について、
次の条件をすべて満たすレコードを絞り込む
datetime カラムの値が 2021-12-17 12:00:00 より小さい
bill カラムの値が 1000 以上である
並びを次のように並べ替える
bill カラムの降順
bill カラムの値が同じとき、datetime カラムの昇順
ことをすればよいとわかる

WHERE カラム名 < 値 で、カラム名 カラムの値が 値 より小さいレコードを絞り込むことができる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT ordered_id FROM ordered WHERE datetime < "2021-12-17 12:00:00" AND bill >= 1000 ORDER BY bill DESC, datetime; と書く*/

<2つのバーガーの注文内容を取得しよう>
step1　合計金額を指定して取得しよう
SELECT * FROM ordered WHERE bill <= 300 OR bill >= 1000;
/*問題文から、ordered テーブルの bill カラムの値が、300 以下、または 1000 以上のレコードを取得すればよいとわかる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE bill <= 300 OR bill >= 1000; と書く*/

step2　日時を指定して取得しよう
SELECT * FROM ordered WHERE datetime < "2021-12-17 12:00:00" OR datetime > "2021-12-17 16:59:59" ORDER BY bill;
/*問題文から、ordered テーブルについて、
datetime カラムの値が 2021-12-17 12:00:00 より小さい、または 2021-12-17 16:59:59 より大きいレコードを絞り込む
bill カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 < 値 で、カラム名 カラムの値が 値 より小さいレコードを絞り込むことができる
WHERE カラム名 > 値 で、カラム名 カラムの値が 値 より大きいレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE datetime < "2021-12-17 12:00:00" OR datetime > "2021-12-17 16:59:59" ORDER BY bill; と書く*/

step3　日時を指定して取得しよう(Part2)
SELECT * FROM ordered WHERE datetime BETWEEN "2021-12-17 11:00:00" AND "2021-12-17 13:59:59" OR datetime BETWEEN "2021-12-17 17:00:00" AND "2021-12-17 20:59:59" ORDER BY datetime;
/*問題文から、ordered テーブルについて、
次の 2 つの条件を、少なくとも 1 つ満たすレコードを絞り込む
datetime カラムの値が 2021-12-17 11:00:00 から 2021-12-17 13:59:59 の間に含まれる
datetime カラムの値が 2021-12-17 17:00:00 から 2021-12-17 20:59:59 の間に含まれる
datetime カラムの昇順に並べ替える

WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM ordered WHERE datetime BETWEEN "2021-12-17 11:00:00" AND "2021-12-17 13:59:59" OR datetime BETWEEN "2021-12-17 17:00:00" AND "2021-12-17 20:59:59" ORDER BY datetime; と書く*/

step4　複合的な条件を指定して取得しよう
SELECT * FROM ordered_menu WHERE menu_id = 13 OR num >= 4 OR sum >= 1000 ORDER BY menu_id;
/*問題文から、ordered_menu テーブルについて、
次の 3 の条件を、少なくとも 1 つ満たすレコードを絞り込む
menu_id カラムの値が 13 である
num カラムの値が 4 以上である
sum カラムの値が 1000 以上である
menu_id カラムの昇順に並べ替える

WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE 条件1 OR 条件2 OR ... OR 条件n で、条件1 または 条件2 または ... または 条件n の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM ordered_menu WHERE menu_id = 13 OR num >= 4 OR sum >= 1000 ORDER BY menu_id; と書く*/

step5　複合的な条件を指定して取得しよう(Part2)
SELECT name, name_yomi, join_date, residence FROM customer WHERE residence = "徳島県" OR residence = "香川県" OR residence = "愛媛県" OR residence = "高知県" OR residence IS NULL ORDER BY join_date, name_yomi;
/*問題文から、customer テーブルについて、
residence カラムの値が 徳島県 または 香川県 または 愛媛県 または 高知県 または NULL であるレコードを絞り込む
並びを次のように並べ替える
join_date カラムの昇順に並べ替える
join_date カラムの値が同じとき、name_yomi カラムの昇順に並べ替える

WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE カラム名 IS NULL で、カラム名 カラムの値が NULL のレコードを絞り込むことができる
WHERE 条件1 OR 条件2 OR ... OR 条件n で、条件1 または 条件2 または ... または 条件n の条件を満たすレコードを絞り込むことができる
よって、SELECT name, name_yomi, join_date, residence FROM customer WHERE residence = "徳島県" OR residence = "香川県" OR residence = "愛媛県" OR residence = "高知県" OR residence IS NULL ORDER BY join_date, name_yomi; と書く*/

final　2つのバーガーの注文内容を取得しよう
SELECT * FROM ordered_menu WHERE menu_id = 7 OR menu_id = 9 ORDER BY num DESC, sum DESC;
/*問題文の条件は、提示されている情報から次のように読み替えることができる
ベーコンチーズバーガー と ベーコンエッグバーガー の注文内容: menu_id カラムの値が 7 または 9 のレコード
ベーコンチーズバーガー のメニュー番号: 7
ベーコンエッグバーガー のメニュー番号: 9
つまり、ordered_menu テーブルについて、
menu_id カラムの値が 7 または、9 であるレコードを絞り込む
並びを次のように並べ替える
num カラムの値の降順
num カラムの値が同じとき、sum カラムの降順
ことをすればよいとわかる

WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM ordered_menu WHERE menu_id = 7 OR menu_id = 9 ORDER BY num DESC, sum DESC; と書く*/

<条件を満たす注文番号を取得しよう>
step1　複合的な条件を指定して取得しよう
SELECT * FROM menu WHERE category_id = 1 OR category_id = 3 AND price <= 250;
/*問題文から、menu テーブルについて、条件 A または B かつ C のレコードを取得すればよいとわかる。
A: category_id カラムの値が 1 である
B: category_id カラムの値が 3 である
C: price カラムの値が 250 以下である

WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM menu WHERE category_id = 1 OR category_id = 3 AND price <= 250; と書く*/

step2　複合的な条件を指定して取得しよう(Part2)
SELECT * FROM menu WHERE (category_id = 1 OR category_id = 3) AND price <= 250;
/*問題文から、menu テーブルについて、条件 (A または B) かつ C のレコードを取得すればよいとわかる。
A: category_id カラムの値が 1 である
B: category_id カラムの値が 3 である
C: price カラムの値が 250 以下である

WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
WHERE (条件1 OR 条件2) AND 条件3 で、条件1 または 条件2 を満たし、かつ 条件3 を満たすレコードを絞り込むことができる
括弧 () を使うと、演算の順番を変えることができる
よって、SELECT * FROM menu WHERE (category_id = 1 OR category_id = 3) AND price <= 250; と書く*/

step3  複合的な条件を指定して取得しよう(Part3)
SELECT * FROM ordered WHERE (datetime BETWEEN "2021-12-17 12:00:00" AND "2021-12-17 12:59:59" OR datetime BETWEEN "2021-12-17 19:00:00" AND "2021-12-17 19:59:59") AND (bill <= 300 OR bill >= 1000) ORDER BY bill;
/*問題文から、ordered テーブルについて、
条件 (A または B) かつ (C または D) を満たすレコードを絞り込む
A: datetime カラムの値が 2021-12-17 12:00:00 から 2021-12-17 12:59:59 の間に含まれる
B: datetime カラムの値が 2021-12-17 19:00:00 から 2021-12-17 19:59:59 の間に含まれる
C: bill カラムの値が 300 以下である
D: bill カラムの値が 1000 以上である
bill カラムの昇順に並べ替える
ことをすればよいとわかる

WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
WHERE (条件1 OR 条件2) AND 条件3 で、条件1 または 条件2 を満たし、かつ 条件3 を満たすレコードを絞り込むことができる（演算の順番を変えることができる）
よって、SELECT * FROM ordered WHERE (datetime BETWEEN "2021-12-17 12:00:00" AND "2021-12-17 12:59:59" OR datetime BETWEEN "2021-12-17 19:00:00" AND "2021-12-17 19:59:59") AND (bill <= 300 OR bill >= 1000) ORDER BY bill; と書く。*/

step4  複合的な条件を指定して取得しよう(Part4)
SELECT * FROM customer WHERE join_date <= "2021-08-24" AND (residence = "群馬県" OR residence = "栃木県" OR residence = "茨城県" OR residence = "埼玉県" OR residence IS NULL) OR join_date > "2021-08-24" AND (residence = "東京都" OR residence = "千葉県" OR residence = "神奈川県") ORDER BY join_date;
/*問題文から、customer テーブルについて、
A かつ (B または C) または D かつ E を満たすレコードを絞り込む
A: 入会日が 2021-08-24 以前である
B: 居住地が 群馬県、栃木県、茨城県、埼玉県 のいずれかである
C: 居住地が NULL である
D: 入会日が 2021-08-24 より後である
E: 居住地が 東京都、千葉県、神奈川県 のいずれかである
※ B, E の条件は、条件内に「または」を含むことに注意
join_date カラムの昇順に並べ替える
ことをすればよいとわかる

WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE カラム名 > 値 で、カラム名 カラムの値が 値 より大きいレコードを絞り込むことができる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE カラム名 IS NULL で、カラム名 カラムの値が NULL のレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
WHERE (条件1 OR 条件2) AND 条件3 で、条件1 または 条件2 を満たし、かつ 条件3 を満たすレコードを絞り込むことができる（演算の順番を変えることができる）
よって、SELECT * FROM customer WHERE join_date <= "2021-08-24" AND (residence = "群馬県" OR residence = "栃木県" OR residence = "茨城県" OR residence = "埼玉県" OR residence IS NULL) OR join_date > "2021-08-24" AND (residence = "東京都" OR residence = "千葉県" OR residence = "神奈川県") ORDER BY join_date; と書く*/

final  複合的な条件を指定して取得しよう
SELECT ordered_id FROM ordered_menu WHERE (ordered_id <= 42 OR ordered_id >= 76) AND (menu_id = 12 OR menu_id = 11 AND num >= 2) ORDER BY ordered_id;
/*問題文の条件は、提示されている情報から次のように読み替えることができる
注文時刻が 2021-12-17 12:00:00 から 2021-12-17 12:59:59 の間でない: ordered_id カラムの値が 42 以下、または 76 以上である（= 条件 A）
SELECT ordered_id, datetime FROM ordered WHERE datetime < "2021-12-17 12:00:00" ORDER BY datetime DESC LIMIT 1;
ordered_id	datetime
42	2021-12-17 11:59:00
注文時刻が 2021-12-17 12:00:00 直前の注文番号は 42
SELECT ordered_id, datetime FROM ordered WHERE datetime > "2021-12-17 12:59:59" ORDER BY datetime LIMIT 1;
ordered_id	datetime
76	2021-12-17 13:00:00
注文時刻が 2021-12-17 12:59:59 直後の注文番号は 76
注文番号は連番
フライドポテトL を注文する: menu_id カラムの値が 12 である（= 条件 B）
フライドポテトM を 2 個以上注文する: menu_id カラムの値が 11 であり、かつ num カラムの値が 2 以上である（= 条件 C）
条件 B, 条件 C は少なくとも 1 つ満たされていればよい
以上のことから、問題文で求められている条件は A かつ (B または C) と言い換えられる
つまり、ordered_menu テーブルについて、
A かつ (B または C) を満たすレコードを絞り込む
A: ordered_id カラムの値が 42 以下、または 76 以上である
B: menu_id カラムの値が 12 である
C: menu_id カラムの値が 11 であり、かつ num カラムの値が 2 以上である
※ A, C の条件は、条件内に「または」を含むことに注意
ordered_id カラムの昇順に並べ替える

WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
WHERE (条件1 OR 条件2) AND 条件3 で、条件1 または 条件2 を満たし、かつ 条件3 を満たすレコードを絞り込むことができる（演算の順番を変えることができる）
よって、SELECT ordered_id FROM ordered_menu WHERE (ordered_id <= 42 OR ordered_id >= 76) AND (menu_id = 12 OR menu_id = 11 AND num >= 2) ORDER BY ordered_id; と書く*/

<謝罪先を調べよう>
step1　カテゴリ番号を指定して取得しよう
SELECT * FROM menu WHERE NOT category_id = 3;
/*問題文から、menu テーブルの category_id カラムの値が 3 でないレコードを取得すればよいとわかる
WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE NOT 条件 で、条件 の否定を満たすレコードを絞り込むことができる
よって、SELECT * FROM menu WHERE NOT category_id = 3; と書く*/

step2　日時を指定して取得しよう
SELECT * FROM ordered WHERE NOT (datetime >= "2021-12-17 14:00:00" AND datetime <= "2021-12-17 16:59:59") ORDER BY bill DESC LIMIT 10;
/*問題文から、ordered テーブルについて、
datetime カラムの値が 2021-12-17 14:00:00 から 2021-12-17 16:59:59 の間に含まれ ない レコードを絞り込む
bill カラムの降順に並べ替える
上位 10 件を取得する

WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
WHERE NOT 条件 で、条件 の否定を満たすレコードを絞り込むことができる
WHERE NOT (条件1 AND 条件2) で、条件1 かつ 条件2 を満たさないレコードを絞り込むことができる（演算の順番を変えることができる）
よって、SELECT * FROM ordered WHERE NOT (datetime >= "2021-12-17 14:00:00" AND datetime <= "2021-12-17 16:59:59") ORDER BY bill DESC LIMIT 10; と書く*/

step3　価格を指定して取得しよう
SELECT category_id, name, price FROM menu WHERE NOT (price <= 200 OR price >= 350) ORDER BY category_id, name;
/*問題文から、menu テーブルについて、
category_id カラム、name カラム、price カラムを取得する
price カラムの値が「200 以下、または 350 以上」で ない レコードを絞り込む
並びを次のように並べ替える
category_id カラムの昇順に並べ替える
category_id カラムの値が同じとき、name カラムの昇順に並べ替える

WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
WHERE NOT 条件 で、条件 の否定を満たすレコードを絞り込むことができる
WHERE NOT (条件1 OR 条件2) で、条件1 または 条件2 を満たさないレコードを絞り込むことができる（演算の順番を変えることができる）
よって、SELECT category_id, name, price FROM menu WHERE NOT (price <= 200 OR price >= 350) ORDER BY category_id, name; と書く*/

step4　複合的な条件を指定して取得しよう
SELECT * FROM ordered_menu WHERE NOT (ordered_id BETWEEN 99 AND 211 OR num < 3 OR sum <= 500) ORDER BY menu_id, num DESC, ordered_id;
/*問題文から、ordered_menu テーブルについて、
次の条件を 1 つも満たさない、つまり「A または B または C の否定」を満たすレコードを絞り込む（参考）
A: ordered_id カラムの値が 99 から 211 の間である
B: num カラムの値が 3 未満である
C: sum カラムの値が 500 以下である
並びを次のように並べ替える
menu_id カラムの値の昇順
menu_id カラムの値が同じとき、num カラムの値の降順
num カラムの値も同じとき、ordered_id カラムの昇順
【 補足 】
「条件 A, B, C を 1 つも満たさない」は、「A または B または C の否定」で表すことができる
なぜか、
「条件 A, B, C を 1 つも満たさない」=『「条件 A, B, C を少なくとも 1 つ満たす」の否定』
「条件 A, B, C を少なくとも 1 つ満たす」=「条件 A または条件 B または条件 C を満たす」
「条件 A または条件 B または条件 C を満たす」= A または B または C
『「条件 A, B, C を少なくとも 1 つ満たす」の否定』=「A または B または C の否定」
よって、「条件 A, B, C を 1 つも満たさない」=「A または B または C の否定」

WHERE カラム名 >= 値 で、カラム名 カラムの値が 値 以上のレコードを絞り込むことができる
WHERE カラム名 < 値 で、カラム名 カラムの値が 値 より小さいレコードを絞り込むことができる
WHERE カラム名 <= 値 で、カラム名 カラムの値が 値 以下のレコードを絞り込むことができる
WHERE カラム名 BETWEEN 値1 AND 値2 で、カラム名 カラムの値が 値1 と 値2 の間に含まれるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 OR ... OR 条件n: 条件1 または 条件2 または ... または 条件n の条件を満たすレコードを絞り込むことができる
WHERE NOT 条件 で、条件 の否定を満たすレコードを絞り込むことができる
WHERE NOT (条件1 OR 条件2) で、条件1 または 条件2 を満たさないレコードを絞り込むことができる（演算の順番を変えることができる）
よって、SELECT * FROM ordered_menu WHERE NOT (ordered_id BETWEEN 99 AND 211 OR num < 3 OR sum <= 500) ORDER BY menu_id, num DESC, ordered_id; と書く*/

final　謝罪先を調べよう
SELECT customer_id, name, name_yomi FROM customer WHERE NOT (residence = "青森県" OR residence = "岩手県" OR residence = "宮城県" OR residence = "秋田県" OR residence = "山形県" OR residence = "福島県") OR residence IS NULL;
/*問題文から、customer テーブルについて、
customer_id カラム、name カラム、name_yomi カラムを取得する
residence カラムの値が 青森県、岩手県、宮城県、秋田県、山形県、福島県 のいずれでもないレコードを絞り込む
つまり、residence カラムの値が『「青森県 である、または 岩手県 である、または 宮城県 である、または 秋田県 である、または 山形県 である、または 福島県 である」の否定』を満たすレコードを絞り込む

WHERE カラム名 = 値: カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 OR ... OR 条件n: 条件1 または 条件2 または ... または 条件n の条件を満たすレコードを絞り込むことができる
WHERE NOT 条件 で、条件 の否定を満たすレコードを絞り込むことができる
WHERE NOT (条件1 OR 条件2) で、条件1 または 条件2 を満たさないレコードを絞り込むことができる（演算の順番を変えることができる）
よって、SELECT customer_id, name, name_yomi FROM customer WHERE NOT (residence = "青森県" OR residence = "岩手県" OR residence = "宮城県" OR residence = "秋田県" OR residence = "山形県" OR residence = "福島県"); と書く*/

<ゲームの勝敗を調べよう>
step1　カテゴリ番号を指定して取得しよう
SELECT * FROM menu WHERE category_id IN (2, 4) ORDER BY price DESC;
/*問題文から、menu テーブルについて、
category_id カラムの値が 2, 4 のいずれかであるレコードを絞り込む
price カラムの降順に並べ替える
ことをすればよいとわかる
WHERE カラム名 IN (値1, 値2) で、カラム名 カラムの値が 値1, 値2 のいずれかであるレコードを絞り込むことができる
WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM menu WHERE category_id IN (2, 4) ORDER BY price DESC; と書く*/

step2　居住地を指定して取得しよう
SELECT name, name_yomi, residence FROM customer WHERE residence IN ("東京都", "大阪府", "愛知県") ORDER BY residence;
/*問題文から、customer テーブルについて、
name カラム、name_yomi カラム、residence カラムを取得する
residence カラムの値が 東京都、大阪府、愛知県 のいずれかであるレコードを絞り込む
residence カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 IN (値1, 値2, ..., 値n) で、カラム名 カラムの値が 値1, 値2, ..., 値n のいずれかであるレコードを絞り込むことができる
WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT name, name_yomi, residence FROM customer WHERE residence IN ("東京都", "大阪府", "愛知県") ORDER BY residence; と書く*/

step3　複合的な条件を指定して取得しよう
SELECT * FROM ordered_menu WHERE num IN (2, 3, 4) AND sum IN (550, 600, 650, 700, 750) ORDER BY num DESC, sum DESC;
/*問題文から、ordered_menu テーブルについて、
条件 A かつ B を満たすレコードを絞り込む
A: num カラムの値が、2, 3, 4 のいずれかである
B: sum カラムの値が、550, 600, 650, 700, 750 のいずれかである
並びを次のように並べ替える
num カラムの降順に並べ替える
num カラムの値が同じとき、sum カラムの降順に並べ替える
ことをすればよいとわかる
WHERE カラム名 IN (値1, 値2, ..., 値n) で、カラム名 カラムの値が 値1, 値2, ..., 値n のいずれかであるレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM ordered_menu WHERE num IN (2, 3, 4) AND sum IN (550, 600, 650, 700, 750) ORDER BY num DESC, sum DESC; と書く*/

step4　複合的な条件を指定して取得しよう(Part2)
SELECT * FROM menu WHERE category_id IN (1, 3) OR price IN (150, 200, 250) ORDER BY category_id, price DESC;
/*問題文から、menu テーブルについて、
条件 A または B を満たすレコードを絞り込む
category_id カラムの値が 1, 3 のいずれかである
price カラムの値が 150, 200, 250 のいずれかである
並びを次のように並べ替える
category_id カラムの昇順に並べ替える
category_id カラムの降順に並べ替える
ことをすればよいとわかる
WHERE カラム名 IN (値1, 値2, ..., 値n) で、カラム名 カラムの値が 値1, 値2, ..., 値n のいずれかであるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM menu WHERE category_id IN (1, 3) OR price IN (150, 200, 250) ORDER BY category_id, price DESC; と書く*/

step5　居住地を指定して取得しよう(Part2)
SELECT * FROM customer WHERE residence NOT IN ("群馬県", "栃木県", "茨城県") ORDER BY name_yomi;
/*問題文から、customer テーブルについて、
residence カラムの値が 群馬県、栃木県、茨城県 のいずれでもないレコードを絞り込む
name_yomi カラムの値の昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 IN (値1, 値2, ..., 値n) で、カラム名 カラムの値が 値1, 値2, ..., 値n のいずれかであるレコードを絞り込むことができる
WHERE NOT 条件 で、条件 の否定を満たすレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE residence NOT IN ("群馬県", "栃木県", "茨城県") ORDER BY name_yomi; と書く

<別解>
（NOT IN 演算子を利用した解答例です。）
WHERE カラム名 NOT IN (値1, 値2, ..., 値n) で、カラム名 カラムの値が 値1, 値2, ..., 値n のいずれでもないレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE residence NOT IN ("群馬県", "栃木県", "茨城県") ORDER BY name_yomi; で正解できる
【 NOT カラム名 IN (値の集合) と カラム名 NOT IN (値の集合) のどちらを使うとよいか 】
どちらも同じ意味で使うことができるので、どちらを使えばよいのか、について紹介します。
まず結論ですが、NOT IN 演算子を使う方が好ましい場合が多いです。
なぜかというと、NOT IN 演算子で書いた方がわかりやすいからです。
NOT 演算子を用いた書き方は、IN 演算子の条件と組み合わせて、あくまで「書ける」という書き方です。
対して、NOT IN 演算子を用いた書き方は、NOT IN 演算子本来の意味で書いた、自然な書き方です。
そのため、NOT IN 演算子を使った方がわかりやすく、SQL 文を考えやすいことが多いので、NOT IN 演算子を用いるた方がよい場合が多いです。
これから SQL 文を書くときの参考にしてみてください。
（今回は IN 演算子をピックアップしている問題群のなかでの出題だったので、NOT IN 演算子を用いた書き方を別解というかたちで紹介しました。）*/

final  ゲームの勝敗を調べよう
SELECT * FROM ordered_menu WHERE menu_id IN (1, 11, 15, 25) ORDER BY sum DESC, ordered_id LIMIT 10;
/*問題文は、次のように読み替えることができる
「4 人が選んだ次のメニューについて」=「menu_id カラムの値が 1, 11, 15, 25 のいずれかであるレコードを絞り込む」
4 人が選んだメニュー:
A: フライドポテトM
B: ホットティー
C: ハンバーガー
D: コーンサラダ
それぞれのメニューの番号:
SELECT id, name FROM menu WHERE name IN ("フライドポテトM", "ホットティー", "ハンバーガー", "コーンサラダ");
id	name
1	ハンバーガー
11	フライドポテトM
15	コーンサラダ
25	ホットティー
「小計の TOP10」=「sum カラムの降順に並べ替えて、上位 10 件を取得する」
つまり、ordered_menu テーブルについて、
menu_id カラムの値が 1, 11, 15, 25 のいずれかであるレコードを絞り込む
sum カラムの降順に並べ替える
上位 10 件を取得する
ことをすればよいとわかる

WHERE カラム名 IN (値1, 値2, ..., 値n) で、カラム名 カラムの値が 値1, 値2, ..., 値n のいずれかであるレコードを絞り込むことができる
よって、SELECT * FROM ordered_menu WHERE menu_id IN (1, 11, 15, 25) ORDER BY sum DESC LIMIT 10; と書く*/

<同僚を助けよう>
step1　メニュー名を指定して取得しよう
SELECT * FROM menu WHERE name LIKE "コー%";
/*問題文から、menu テーブルの name カラムの値が コー から始まるレコードを取得すればよいとわかる
WHERE カラム名 LIKE 値% で、カラム名 カラムの値が 値 で始まるレコードを絞り込むことができる
よって、SELECT * FROM menu WHERE name LIKE "コー%"; と書く*/

step2　漢字名を指定して取得しよう
SELECT * FROM customer WHERE name LIKE "小%" ORDER BY customer_id;
/*問題文から、customer テーブルについて、
name カラムの値が 小 から始まるレコードを絞り込む
customer_id カラムの昇順に並べ替える
ことをすればよいとわかる

WHERE カラム名 LIKE 値% で、カラム名 カラムの値が 値 で始まるレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE name LIKE "小%" ORDER BY customer_id; と書く*/

step3　会員名を指定して取得しよう
SELECT customer_id, name, name_yomi FROM customer WHERE name_yomi LIKE "イシ%" OR name_yomi LIKE "オオ%" ORDER BY name_yomi;
/*問題文から、customer テーブルについて、
customer_id カラム、name カラム、name_yomi カラムを取得する
name_yomi カラムの値が イシ または、オオ から始まるレコードを絞り込む
name_yomi カラムの昇順に並べ替える
ことをすればよいとわかる

WHERE カラム名 LIKE 値% で、カラム名 カラムの値が 値 で始まるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT customer_id, name, name_yomi FROM customer WHERE name_yomi LIKE "イシ%" OR name_yomi LIKE "オオ%" ORDER BY name_yomi; と書く*/

step4　居住地を指定して取得しよう
SELECT * FROM customer WHERE residence LIKE "長%" OR residence LIKE "福%" OR residence LIKE "宮%" OR residence LIKE "山%" OR residence IS NULL ORDER BY residence, name_yomi;
/*問題文から、customer テーブルについて、
条件 A または B を満たすレコードを絞り込む
A: residence カラムの値が 長、福、宮、山 のいずれかから始まる
B: residence カラムの値が MULL である
並びを次のように並べ替える
residence カラムの昇順に並べ替える
residence カラムの値が同じとき、name_yomi カラムの照準に並べ替える
ことをすればよいとわかる

WHERE カラム名 LIKE 値% で、カラム名 カラムの値が 値 で始まるレコードを絞り込むことができる
WHERE カラム名 IS NULL で、カラム名 カラムの値が NULL のレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE residence LIKE "長%" OR residence LIKE "福%" OR residence LIKE "宮%" OR residence LIKE "山%" OR residence IS NULL ORDER BY residence, name_yomi; と書く*/

final　同僚を助けよう
SELECT customer_id, name, name_yomi FROM customer WHERE name LIKE "真%" AND name_yomi LIKE "サ%";
SELECT customer_id, name, name_yomi FROM customer WHERE name LIKE "真%" AND name_yomi LIKE "マ%";
/*問題文で提示されている条件は、次のように読み替えることができる
「会員のリストのなかで、名字が 真 から始まり、読みが サ から始まる会員」=「customer テーブルについて、name カラムの値が 真 から始まる、かつ name_yomi カラムの値が サ から始まる」
「会員のリストのなかで、名字が 真 から始まり、読みが マ から始まる」=「customer テーブルについて、name カラムの値が 真 から始まる、かつ name_yomi カラムの値が マ から始まる」
「会員の、通し番号、漢字名、およびそのフリガナ」=「customer_id カラム、name カラム、name_yomi カラムを取得する」
つまり、次の 1. と 2. をおこなえばよいとわかる
customer テーブルについて、次のことをする
customer_id カラム、name カラム、name_yomi カラムを取得する
条件 A1 かつ B1 を満たすレコードを絞り込む
A1: name カラムの値が 真 から始まる
B1: name_yomi カラムの値が サ から始まる
customer テーブルについて、次のことをする
customer_id カラム、name カラム、name_yomi カラムを取得する
条件 A2 かつ B2 を満たすレコードを絞り込む
A2: name カラムの値が 真 から始まる
B2: name_yomi カラムの値が マ から始まる

WHERE カラム名 LIKE 値% で、カラム名 カラムの値が 値 で始まるレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT customer_id, name, name_yomi FROM customer WHERE name LIKE "真%" AND name_yomi LIKE "サ%"; および SELECT customer_id, name, name_yomi FROM customer WHERE name LIKE "真%" AND name_yomi LIKE "マ%"; を書く*/

<同僚に協力しよう>
step1　メニュー名を指定して取得しよう
SELECT * FROM menu WHERE name LIKE "%ッシュ%";
/*問題文から、menu テーブルの name カラムの値に ッシュ が含まれているレコードを取得すればよいとわかる
WHERE カラム名 LIKE %値% で、カラム名 カラムの値に 値 が含まれるレコードを絞り込むことができる
よって、SELECT * FROM menu WHERE name LIKE "%ッシュ%"; と書く*/

step2　漢字名を指定して取得しよう
SELECT * FROM customer WHERE name LIKE "%こは%" OR name LIKE "%明日%" ORDER BY join_date;
/*問題文から、customer テーブルについて、
条件 A または B を満たすレコードを絞り込む
A: name カラムの値に こは が含まれる
B: name カラムの値に 明日 が含まれる
join_date カラムの値の昇順に並べ替える

WHERE カラム名 LIKE %値% で、カラム名 カラムの値に 値 が含まれるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE name LIKE "%こは%" OR name LIKE "%明日%" ORDER BY join_date; と書く*?

step3　会員名を指定して取得しよう
SELECT name, name_yomi, residence FROM customer WHERE name_yomi LIKE "%リトウ%" OR name_yomi LIKE "%ラユウ%" OR name_yomi LIKE "%マナナ%" ORDER BY name_yomi;
/*問題文から、customer テーブルについて、
name カラム、name_yomi カラム、residence カラムを取得する
name_yomi カラムの値に リトウ、ラユウ、マナナ のいずれが少なくとも 1 つ含まれるレコードを絞り込む
name_yomi カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 LIKE %値% で、カラム名 カラムの値に 値 が含まれるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT name, name_yomi, residence FROM customer WHERE name_yomi LIKE "%リトウ%" OR name_yomi LIKE "%ラユウ%" OR name_yomi LIKE "%マナナ%" ORDER BY name_yomi; と書く*/

step4　居住地を指定して取得しよう
SELECT * FROM customer WHERE residence LIKE "%島県%" OR residence LIKE "%京都%" OR residence LIKE "%児島%" OR residence IS NULL ORDER BY residence, name_yomi;
/*問題文から、customer テーブルについて、
条件 A または B を満たすレコードを絞り込む
A: residence カラムの値に 島県、京都、児島 のいずれかが少なくとも 1 つ含まれる
B: residence カラムの値が NULL である
並びを次のように並べ替える
residence カラムの昇順に並べ替える
residence カラムの値が同じとき、name_yomi カラムの昇順に並べ替える

WHERE カラム名 LIKE %値% で、カラム名 カラムの値に 値 が含まれるレコードを絞り込むことができる
WHERE カラム名 IS NULL で、カラム名 カラムの値が NULL のレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE residence LIKE "%島県%" OR residence LIKE "%京都%" OR residence LIKE "%児島%" OR residence IS NULL ORDER BY residence, name_yomi; と書く*/

final　同僚に協力しよう
SELECT * FROM menu WHERE category_id = 3 AND (name LIKE "%ポテ%" OR name LIKE "%テト%" OR name LIKE "%トフ%" OR name LIKE "%フー%" OR name LIKE "%ーリ%" OR name LIKE "%リー%");
/*問題文で提示されている条件は、次のように読み替えることができる
「デザートのメニュー名どうしで」=「category_id カラムの値が 3 であるものどうしで」
デザートの category_id カラムの値は 3
SELECT * FROM category
id	name
1	バーガー
2	サイドメニュー
3	デザート
4	ドリンク
「ポテトフーリー 内の連続する 2 文字が、他のデザートのメニュー名に部分一致するか」=「デザートのレコードの name カラムの値に ポテ、テト、トフ、フー、ーリ、リー のいずれかが少なくとも 1 つ含まれるレコードを絞り込む」
つまり、menu テーブルについて、条件 A かつ B を満たすレコードを取得すればよいとわかる
A: category_id カラムの値が 3 である
B: name カラムの値に ポテ、テト、トフ、フー、ーリ、リー のいずれかが少なくとも 1 つ含まれる

WHERE カラム名 LIKE %値% で、カラム名 カラムの値に 値 が含まれるレコードを絞り込むことができる
WHERE カラム名 = 値 で、カラム名 カラムの値が 値 であるレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
WHERE 条件1 AND (条件2 OR 条件3) で、条件1 を満たし、かつ 条件2 または 条件3 を満たすレコードを絞り込むことができる（演算の順番を変えることができる）
よって、SELECT * FROM menu WHERE category_id = 3 AND (name LIKE "%ポテ%" OR name LIKE "%テト%" OR name LIKE "%トフ%" OR name LIKE "%フー%" OR name LIKE "%ーリ%" OR name LIKE "%リー%"); と書く*/

<しりとりで勝つ>
step1　メニュー名を指定して取得しよう
SELECT * FROM menu WHERE name LIKE "%ィー";
/*問題文から、menu テーブルの name カラムの値が ィー で終わるレコードを取得すればよいとわかる
WHERE カラム名 LIKE %値 で、カラム名 カラムの値が 値 で終わるレコードを絞り込むことができる
よって、SELECT * FROM menu WHERE name LIKE "%ィー"; と書く*/

step2　漢字名を指定して取得しよう
SELECT name, name_yomi FROM customer WHERE name LIKE "%子" OR name LIKE "%月" OR name LIKE "%斗";
/*問題文から、customer テーブルについて、
name カラムと name_yomi カラムを取得する
name カラムの値が 子、月、斗 のいずれかで終わるレコードを絞り込む
ことをすればよいとわかる
WHERE カラム名 LIKE %値 で、カラム名 カラムの値が 値 で終わるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT name, name_yomi FROM customer WHERE name LIKE "%子" OR name LIKE "%月" OR name LIKE "%斗"; と書く*/

step3　会員名を指定して取得しよう
SELECT * FROM customer WHERE name_yomi LIKE "%ャラ" OR name_yomi LIKE "%ウカ" OR name_yomi LIKE "%ウセイ" ORDER BY join_date;
/*問題文から、customer テーブルについて、
name_yomi カラムの値が ャラ、ウカ、ウセイ のいずれかで終わるレコードを絞り込む
join_date カラムの昇順に並べ替える
ことをすればよいとわかる
WHERE カラム名 LIKE %値 で、カラム名 カラムの値が 値 で終わるレコードを絞り込むことができる
WHERE 条件1 OR 条件2 で、条件1 または 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE name_yomi LIKE "%ャラ" OR name_yomi LIKE "%ウカ" OR name_yomi LIKE "%ウセイ" ORDER BY join_date; と書く*\

step4　居住地を指定して取得しよう
SELECT * FROM customer WHERE residence NOT LIKE "%県" AND residence IS NOT NULL ORDER BY residence, name_yomi;
/*問題文から、customer テーブルについて、
条件 A かつ B を満たすレコードを絞り込む
A: residence カラムの値が 県 で終わらない
B: residence カラムの値が NULL でない
並びを次のように並べ替える
residence カラムの値の昇順に並べ替える
residence カラムの値が同じとき、name_yomi カラムの値の昇順に並べ替える

WHERE カラム名 LIKE %値 で、カラム名 カラムの値が 値 で終わるレコードを絞り込むことができる
WHERE カラム名 IS NOT NULL で、カラム名 カラムの値が NULL でないレコードを絞り込むことができる
WHERE NOT 条件 で、条件 の否定を満たすレコードを絞り込むことができる
WHERE 条件1 AND 条件2 で、条件1 かつ 条件2 の条件を満たすレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE NOT residence LIKE "%県" AND residence IS NOT NULL ORDER BY residence, name_yomi; と書く

別解
SELECT * FROM customer WHERE residence NOT LIKE "%県" AND residence IS NOT NULL ORDER BY residence, name_yomi;
（NOT LIKE 演算子を利用した解答例です。）
WHERE カラム名 NOT LIKE %値 で、カラム名 カラムの値が 値 で終わらないレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE NOT residence LIKE "%県" AND residence IS NOT NULL ORDER BY residence, name_yomi; で正解できる*/

final　しりとりで勝つ
SELECT * FROM customer WHERE name_yomi LIKE "%ン" ORDER BY name_yomi;
/*問題文から、customer テーブルについて、
name_yomi カラムの値が ン で終わるレコードを絞り込む
name_yomi カラムの昇順に並べ替える
ことをすればよいとわかる

WHERE カラム名 LIKE %値 で、カラム名 カラムの値が 値 で終わるレコードを絞り込むことができる
よって、SELECT * FROM customer WHERE name_yomi LIKE "%ン" ORDER BY name_yomi; と書く*/

新・SQL入門編04ドリル
<IDなしのメニュー表を作ろう>
step1　注文履歴と注文内容を内部結合しよう
SELECT * FROM ordered INNER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LIMIT 10 ;
/*問題文から、注文履歴と注文内容を、注文の通し番号で内部結合すればよいとわかる
FROM テーブル名1 INNER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で結合することができる
条件はordered テーブルのordered_id カラムとordered_menu テーブルのordered_id カラムの値が等しいこと
よって、SELECT * FROM ordered INNER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LIMIT 10 ; と書く*/

step2　カテゴリとメニューを内部結合しよう
SELECT * FROM category INNER JOIN menu ON category.category_id = menu.category_id LIMIT 10 ;
/*問題文から、カテゴリとメニューを、カテゴリ番号で内部結合すればよいとわかる
FROM テーブル名1 INNER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で結合することができる
条件はcategory テーブルのcategory_id カラムとmenu テーブルのcategory_id カラムの値が等しいこと
よって、SELECT * FROM category INNER JOIN menu ON category.category_id = menu.category_id LIMIT 10 ; と書く*/

step3　注文内容とメニューを内部結合しよう
SELECT * FROM ordered_menu INNER JOIN menu ON ordered_menu.menu_id = menu.menu_id LIMIT 10 ;
/*問題文から、注文内容とメニューを、メニュー番号で内部結合すればよいとわかる
FROM テーブル名1 INNER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で結合することができる
条件はordered_menu テーブルのmenu_id カラムとmenu テーブルのmenu_id カラムの値が等しいこと
よって、SELECT * FROM ordered_menu INNER JOIN menu ON ordered_menu.menu_id = menu.menu_id LIMIT 10 ; と書く*/

step4　データの欠けたテーブルを内部結合しよう
SELECT * FROM ordered INNER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LIMIT 10 ;
/*問題文から、注文履歴と注文内容を、注文の通し番号で内部結合すればよいとわかる
データが欠損していても、実装する内容は今までの問題と同じ
FROM テーブル名1 INNER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で結合することができる
条件はordered テーブルのordered_id カラムとordered_menu テーブルのordered_id カラムの値が等しいこと
よって、SELECT * FROM ordered INNER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LIMIT 10 ; と書く*/

final　IDなしのメニュー表を作ろう
SELECT menu.name, category.name, menu.price FROM menu INNER JOIN category ON menu.category_id = category.category_id;
/*問題文から、メニューとカテゴリを内部結合すればよいとわかる
そのあとにメニュー名、カテゴリ名、価格のみをこの順で取得すればよい
FROM テーブル名1 INNER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で結合することができる
条件はmenu テーブルのcategory_id カラムとcategory テーブルのcategory_id カラムの値が等しいこと
SELECT カラム名1, カラム名2, ... FROM テーブル名で、テーブル名 のテーブルの カラム名1, カラム名2, ... カラムを取得することができる
よって、SELECT menu.name, category.name, menu.price FROM menu INNER JOIN category ON menu.category_id = category.category_id; と書く*/

<応急メニュー表>
step1　テーブルを左外部結合しよう 1
SELECT * FROM ordered LEFT OUTER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LIMIT 10 ;
/*問題文から、注文履歴と注文内容を、注文の通し番号で左外部結合すればよいとわかる
FROM テーブル名1 LEFT OUTER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で左外部結合することができる
条件はordered テーブルのordered_id カラムとordered_menu テーブルのordered_id カラムの値が等しいこと
よって、SELECT * FROM ordered LEFT OUTER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LIMIT 10 ; と書く*/

step2　テーブルを左外部結合しよう 2
SELECT * FROM ordered_menu LEFT OUTER JOIN menu ON ordered_menu.menu_id = menu.menu_id LIMIT 10 ;
/*問題文から、注文内容とメニューを、メニュー番号で左外部結合すればよいとわかる
FROM テーブル名1 LEFT OUTER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で左外部結合することができる
条件はordered_menu テーブルのmenu_id カラムとmenu テーブルのmenu_id カラムの値が等しいこと
よって、SELECT * FROM ordered_menu LEFT OUTER JOIN menu ON ordered_menu.menu_id = menu.menu_id LIMIT 10 ; と書く*/

step3　テーブルを右外部結合しよう 1
SELECT * FROM ordered RIGHT OUTER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LIMIT 10 ;
/*問題文から、注文履歴と注文内容を、注文の通し番号で右外部結合すればよいとわかる
FROM テーブル名1 RIGHT OUTER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で右外部結合することができる
条件はordered テーブルのordered_id カラムとordered_menu テーブルのordered_id カラムの値が等しいこと
よって、SELECT * FROM ordered RIGHT OUTER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LIMIT 10 ; と書く*/

step4　テーブルを右外部結合しよう 2
SELECT * FROM ordered_menu RIGHT OUTER JOIN menu ON ordered_menu.menu_id = menu.menu_id LIMIT 10 ;
/*問題文から、注文内容とメニューを、メニュー番号で右外部結合すればよいとわかる
FROM テーブル名1 RIGHT OUTER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で右外部結合することができる
条件はordered_menu テーブルのmenu_id カラムとmenu テーブルのmenu_id カラムの値が等しいこと
よって、SELECT * FROM ordered_menu RIGHT OUTER JOIN menu ON ordered_menu.menu_id = menu.menu_id LIMIT 10 ; と書く*/

final　応急メニュー表
SELECT menu.name, category.name, menu.price FROM menu LEFT OUTER JOIN category ON menu.category_id = category.category_id;
/*問題文から、メニューの各レコードに対しカテゴリに対応するレコードがあれば結合し、なければNULLを返せばよいことがわかる。
つまり、メニューにカテゴリを左外部結合すればよい。
FROM テーブル名1 LEFT OUTER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で左外部結合することができる
条件はmenu テーブルのcategory_id カラムとcategory テーブルのcategory_id カラムの値が等しいこと
よって、SELECT menu.name, category.name, menu.price FROM menu LEFT OUTER JOIN category ON menu.category_id = category.category_id; と書く*/

<ウルトラ注文履歴>
step1　3つのテーブルを内部結合しよう
SELECT * FROM ordered INNER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id INNER JOIN menu ON ordered_menu.menu_id = menu.menu_id LIMIT 10 ;
/*問題文から、3つのテーブルを、注文の通し番号、メニュー番号で内部結合すればよいとわかる
FROM テーブル名1 INNER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で結合することができる
条件はordered テーブルのordered_id カラムとordered_menu テーブルのordered_id カラムの値が等しいこと、ordered_menu テーブルのmenu_id カラムとmenu テーブルのmenu_id カラムの値が等しいこと
よって、SELECT * FROM ordered INNER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id INNER JOIN menu ON ordered_menu.menu_id = menu.menu_id LIMIT 10 ; と書く*/

step2　3つのテーブルを外部結合しよう
SELECT * FROM ordered LEFT OUTER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LEFT OUTER JOIN menu ON ordered_menu.menu_id = menu.menu_id LIMIT 10 ;
/*問題文から、3つのテーブルを、注文の通し番号、メニュー番号で左外部結合すればよいとわかる
FROM テーブル名1 LEFT OUTER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で左外部結合することができる
条件はordered テーブルのordered_id カラムとordered_menu テーブルのordered_id カラムの値が等しいこと、ordered_menu テーブルのmenu_id カラムとmenu テーブルのmenu_id カラムの値が等しいこと
よって、SELECT * FROM ordered LEFT OUTER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LEFT OUTER JOIN menu ON ordered_menu.menu_id = menu.menu_id LIMIT 10 ; と書く*/

step3　全部盛り
SELECT * FROM ordered INNER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id INNER JOIN menu ON ordered_menu.menu_id = menu.menu_id INNER JOIN category ON menu.category_id = category.category_id LIMIT 10 ;
/*問題文から、4つのテーブルを、注文の通し番号、メニュー番号、カテゴリ番号で内部結合すればよいとわかる
FROM テーブル名1 INNER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で結合することができる
条件はordered テーブルのordered_id カラムとordered_menu テーブルのordered_id カラムの値が等しいこと、ordered_menu テーブルのmenu_id カラムとmenu テーブルのmenu_id カラムの値が等しいこと、menu テーブルのcategory_id カラムとcategory テーブルのcategory_id カラムの値が等しいこと
よって、SELECT * FROM ordered INNER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id INNER JOIN menu ON ordered_menu.menu_id = menu.menu_id INNER JOIN category ON menu.category_id = category.category_id LIMIT 10 ; と書く*/

step4　スーパー注文内容
SELECT ordered_id, category.name, menu.name, ordered_menu.num, ordered_menu.sum FROM ordered_menu INNER JOIN menu ON ordered_menu.menu_id = menu.menu_id INNER JOIN category ON menu.category_id = category.category_id ;
/*問題文から、注文内容とメニューとカテゴリを、メニュー番号、カテゴリ番号で内部結合すればよいとわかる
結合後のテーブルから注文の通し番号、カテゴリ名、メニュー名、メニューの注文数、小計をこの順で取得すればよい
FROM テーブル名1 INNER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で結合することができる
条件はordered_menu テーブルのmenu_id カラムとmenu テーブルのmenu_id カラムの値が等しいこと、menu テーブルのcategory_id カラムとcategory テーブルのcategory_id カラムの値が等しいこと
よって、SELECT ordered_id, category.name, menu.name, ordered_menu.num, ordered_menu.sum FROM ordered_menu INNER JOIN menu ON ordered_menu.menu_id = menu.menu_id INNER JOIN category ON menu.category_id = category.category_id ; と書く*/

final　ウルトラ注文履歴
SELECT * FROM ordered INNER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LEFT OUTER JOIN menu ON ordered_menu.menu_id = menu.menu_id ;
/*問題文より、注文履歴と注文内容を結合する際はNULLが許されないので、内部結合すればよい
また、注文内容とメニューは左外部結合すればよい
FROM テーブル名1 INNER JOIN テーブル名2 ON 条件 で、テーブル名1 とテーブル名2 テーブルを条件で結合することができる
条件はordered テーブルのordered_id カラムとordered_menu テーブルのordered_id カラムの値が等しいこと、ordered_menu テーブルのmenu_id カラムとmenu テーブルのmenu_id カラムの値が等しいこと、menu テーブルのcategory_id カラムとcategory テーブルのcategory_id カラムの値が等しいこと
よって、SELECT * FROM ordered INNER JOIN ordered_menu ON ordered.ordered_id = ordered_menu.ordered_id LEFT OUTER JOIN menu ON ordered_menu.menu_id = menu.menu_id ; と書く*/

新・SQL入門編05ドリル
<カテゴリごとの売上を求めよう>
step1　売上を求めよう
SELECT SUM(bill) FROM ordered;
/*問題文から、カラム bill の合計を取得すればよいとわかる
SELECT SUM(カラム名) FROM テーブル名 で、カラム名 カラムの合計を取得できる
よって、SELECT SUM(bill) FROM ordered; と書く*/

step2　売れた個数の合計を求めよう
SELECT SUM(num) FROM ordered_menu;
/*問題文から、すべてのメニューの注文数の合計を取得すればよいとわかる
SELECT SUM(カラム名) FROM テーブル名 で、カラム名 カラムの合計を取得できる
よって、SELECT SUM(num) FROM ordered_menu; と書く*/

step3　全部1個ずつ
SELECT SUM(price) FROM menu;
/*問題文から、すべてのメニューを1つずつ買ったときにかかる合計金額を取得すればよいとわかる
SELECT SUM(カラム名) FROM テーブル名 で、カラム名 カラムの合計を取得できる
よって、SELECT SUM(price) FROM menu; と書く*/

step4　メニューごとの売上を求めよう
SELECT menu_id, SUM(sum) FROM ordered_menu GROUP BY menu_id;
/*問題文から、各メニューごとに注文の合計金額を取得すればよいとわかる
SELECT カラム名1, SUM(カラム名2) FROM テーブル名 GROUP BY カラム名1 で、カラム名1のグループごとにカラム名2 カラムの合計を取得できる
よって、SELECT menu_id, SUM(sum) FROM ordered_menu GROUP BY menu_id; と書く*/

final　カテゴリごとの売上を求めよう
SELECT category_id, SUM(sum) FROM menu
INNER JOIN ordered_menu ON menu.menu_id = ordered_menu.menu_id
GROUP BY category_id;
/*問題文から、メニューのカテゴリごとに全注文の合計金額を取得すればよいとわかる
SELECT * FROM テーブル名1 INNER JOIN テーブル名2 ON テーブル名1のカラム名 = テーブル名2のカラム名; で、テーブル名1とテーブル名2を、テーブル名1のカラム名とテーブル名2のカラム名で内部結合する
また、SELECT カラム名1, SUM(カラム名2) FROM テーブル名 GROUP BY カラム名1 で、カラム名1のグループごとにカラム名2 カラムの合計を取得できる
よって、SELECT category_id, SUM(sum) FROM menu INNER JOIN ordered_menu ON menu.menu_id = ordered_menu.menu_id GROUP BY category_id; と書く*/

<カテゴリごとの平均価格を求めよう>
step1　注文金額の平均を求めよう
SELECT AVG(bill) FROM ordered;
/*問題文から、カラムbillの平均を取得すればよいとわかる
SELECT AVG(カラム名) FROM テーブル名 で、カラム名カラムの平均を取得できる
よって、SELECT AVG(bill) FROM ordered; と書く*/

step2　注文数の平均を求めよう
SELECT AVG(num) FROM ordered_menu;
/*問題文から、numカラムの平均を取得すればよいとわかる
SELECT AVG(カラム名) FROM テーブル名 で、カラム名カラムの平均を取得できる
よって、SELECT AVG(num) FROM ordered_menu; と書く*/

step3　全メニューの平均価格を求めよう
SELECT AVG(price) FROM menu;
/*問題文から、すべてのメニューの平均価格を取得すればよいとわかる
SELECT AVG(カラム名) FROM テーブル名 で、カラム名カラムの平均を取得できる
よって、SELECT AVG(price) FROM menu; と書く*/

step4　メニューごとの平均注文数を求めよう
final　カテゴリごとの平均価格を求めよう

<各注文の最高単価メニューを求めよう>
step1　最高額のメニューを求めよう
step2　最低額のメニューを求めよう
step3　注文金額の最低額と最高額を求めよう
step4　カテゴリごとの最安・最高メニューを求めよう
step5　ポテト王
final　各注文の最高単価メニューを求めよう

<カラムに名前を付けてみよう4>
step1 カラムに名前を付けてみよう1
step2 カラムに名前を付けてみよう2
step3 カラムに名前を付けてみよう3
final カラムに名前を付けてみよう4

<会員が多い都道府県を調べよう>
step1　一定以上の売上のメニューを調べよう
step2　5品以上の注文を調べよう
step3　平均注文数が多いメニューを調べよう
step4　メニューを3種類頼んだ注文を調べよう
final　会員が多い都道府県を調べよう

<安くてたくさん>
step1　午後の売上が一定以上のメニューを調べよう
step2　会員が多い都道府県を調べよう 2
step3　お昼時の5品以上の注文を調べよう
step4　高額注文によく含まれるメニューを調べよう
final　安くてたくさん

新・SQL入門編06ドリル
<カテゴリを開発しよう>
step1　カテゴリを追加しよう
INSERT INTO category(category_id, name)
VALUES (5, '限定');
SELECT *
FROM category;
/*問題文から、5番目 のカテゴリとして限定という名前のカテゴリを追加し、カテゴリをすべて取得すればよいとわかる
INSERT INTO テーブル名(カラム1, カラム2, ...) VALUES (値1, 値2, ...)で、テーブルに含まれるカラム名と、カラム名に対応する値を指定することでレコードを追加することができる
よって、INSERT INTO category(category_id, name) VALUES (5, '限定'); SELECT * FROM category; と書く*/

step2　メニューを追加しよう
INSERT INTO menu
VALUES (28, 4, 'ロイヤルミルクティー', 300);
SELECT *
FROM menu
WHERE category_id = 4;
/*問題文から、28番目のメニューとしてカテゴリ番号4のドリンクに、ロイヤルミルクティーという名前で価格は300円のメニューを追加し、メニューのうち、カテゴリ番号4のレコードをすべて取得すればよいとわかる
INSERT INTO テーブル名 VALUES (値1, 値2, ...)で、テーブルに含まれるカラム名に対応する値をすべて指定することにより、カラム名を省略しレコードを追加することができる
WHERE カラム名 = 値で、カラム名カラムの値が値であるレコードを絞り込むことができる
よって、INSERT INTO menu VALUES (28, 4, 'ロイヤルミルクティー', 300); SELECT * FROM menu WHERE category_id = 4; と書く*/

step3　注文履歴にデータを追加しよう
step4　顧客データを追加しよう
final  カテゴリを開発しよう

<2件の注文されたメニューのデータを記録しよう>
step1　カテゴリを2つ追加しよう
step2　注文履歴にデータを3つ追加しよう
step3　メニューを4つ追加しよう
step4　顧客データを2つ追加しよう
final  2件の注文されたメニューのデータを記録しよう

